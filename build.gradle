plugins {
    id 'eclipse'
    id 'idea'
    id 'java-library'
    id 'net.neoforged.moddev' version '2.0.36-beta'
}

group = 'com.lovetropics.minigames'
base {
    archivesName = 'LTMinigames'
}

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') ?: 'custom'

if (System.getenv('GHA_RELEASE_WORKFLOW')) {
    version = "${mod_version}"
} else if (System.getenv('GITHUB_RUN_NUMBER')) {
    project.buildnumber = System.getenv('GITHUB_RUN_NUMBER')
    version = "${mod_version}-${release_type}+${buildnumber}-gha"
} else {
    project.buildnumber = System.getenv('BUILD_NUMBER') ?: 'custom'
    version = "${mod_version}-${release_type}+${buildnumber}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude 'testing/**'
}
sourceSets.test.resources {
    srcDir 'src/generated/resources'
    include 'testing/**'
    include 'data/ltminigames/structures/**'
}

neoForge {
    version = project.neo_version

    parchment {
        minecraftVersion = minecraft_version
        mappingsVersion = parchment_version
    }

    addModdingDependenciesTo sourceSets.test

    mods {
        "${project.mod_id}" {
            sourceSet sourceSets.main
        }
        "${project.mod_id}_test" {
            sourceSet sourceSets.main
            sourceSet sourceSets.test
        }
    }

    runs {
        client {
            client()
            loadedMods = [mods."${mod_id}"]

            programArguments.addAll '--username', 'Dev' + new Random().nextInt(999)
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            loadedMods = [mods."${mod_id}"]

            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            sourceSet = sourceSets.test
            loadedMods = [mods."${mod_id}_test"]

            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            loadedMods = [mods."${mod_id}_test"]

            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            logLevel = org.slf4j.event.Level.WARN
        }
    }
}

configurations {
    modImpl
    implementation.extendsFrom(modImpl)
    testImplementation.extendsFrom(modImpl)

    modRuntime
    runtimeOnly.extendsFrom(modRuntime)
    testRuntimeOnly.extendsFrom(modRuntime)

    modCompile
    compileOnly.extendsFrom(modCompile)
    testCompileOnly.extendsFrom(modCompile)
}

repositories {
    maven { url = "https://maven.ithundxr.dev/snapshots/" }
    maven { url = "https://maven.tterrag.com/" }
    maven { url = "https://api.modrinth.com/maven" }
    mavenLocal()
}

dependencies {
    modRuntime 'maven.modrinth:tropicraft:9.7.3-1.21'

    // TODO: HACK - We get Registrate at runtime through JarJar from Tropicraft. We should rather prefer to depend on the slim jar.
    jarJar(modCompile("com.tterrag.registrate:Registrate:MC1.21-${registrate_version}")) {
        version {
            strictly "[MC1.21-${registrate_version},MC1.22)"
            prefer "MC1.21-${registrate_version}"
        }
    }

    jarJar(modImpl("com.lovetropics.lib:LTLib:$ltlib_version"))

    modRuntime "com.lovetropics.extras:LTExtras:$ltextras_version"

    testImplementation platform("org.junit:junit-bom:5.7.0")
    testImplementation "org.junit.jupiter:junit-jupiter"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.register('sourceJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.java
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mod_version: mod_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
